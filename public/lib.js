// Generated by CoffeeScript 1.3.3
(function() {
  var $, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Picplum = root.Picplum || {};

  $ = jQuery;

  Picplum.init = function(app_id, opts) {
    var options;
    if (opts == null) {
      opts = {};
    }
    options = {
      insert_btns: true,
      insert_count: true,
      img_class: '.photo',
      print_bar_class: '.print_bar',
      print_selected_btn_class: '.print_selected_btn',
      print_all_btn_class: '.print_all_btn',
      selected_count_class: '.selected_count',
      apply_styles: true,
      debug: false
    };
    Picplum.settings = $.extend(options, opts);
    Picplum.debug = Picplum.settings.debug;
    Picplum.selected_photos = {};
    Picplum.log('PicplumJS Init()');
    Picplum.PickerUI.init();
    return true;
  };

  Picplum.log = function(msg) {
    if (Picplum.debug) {
      return console.log(msg);
    }
  };

  Picplum.Photo = {
    selected_count: function() {
      var key, size;
      size = 0;
      Picplum.log(Picplum.selected_photos);
      for (key in Picplum.selected_photos) {
        if (Picplum.selected_photos.hasOwnProperty(key)) {
          size++;
        }
      }
      return size;
    },
    select: function(thumb_url, url) {
      var new_id;
      new_id = this.uniqueId();
      Picplum.selected_photos[new_id] = {
        thumb_url: thumb_url,
        url: url
      };
      Picplum.log('New Photo selected');
      Picplum.log(Picplum.selected_photos[new_id]);
      return new_id;
    },
    deselect: function(id) {
      delete Picplum.selected_photos[id];
      Picplum.log('Photo de-selected => ' + id);
      return id;
    },
    idCounter: 0,
    uniqueId: function(prefix) {
      var id;
      if (prefix == null) {
        prefix = 'c';
      }
      id = Picplum.Photo.idCounter++;
      return prefix + id;
    }
  };

  Picplum.PickerUI = {
    init: function() {
      Picplum.log('Picker UI Init');
      this.print_bar();
      return this.photos_grid();
    },
    print_bar: function() {
      var el;
      el = $(Picplum.settings.print_bar_class);
      return el.html("<button class='btn " + (Picplum.settings.print_all_btn_class.replace('.', '')) + "' type='button'>Print All Photos</button>\n<button style=\"display: none;\" class='btn " + (Picplum.settings.print_selected_btn_class.replace('.', '')) + "' type='button'>Print Selected</button>\n<span style=\"display: none;\" class='" + (Picplum.settings.selected_count_class.replace('.', '')) + "'></span>");
    },
    photos_grid: function() {
      var el;
      Picplum.log('Picker UI Init: Photos Grid');
      el = $(Picplum.settings.img_class);
      return el.on('click', function() {
        var puid, selected;
        selected = $(this).data('puid');
        if (selected) {
          Picplum.Photo.deselect(selected);
          $(this).removeData('puid');
          $(this).css({
            border: 0,
            margin: 0
          });
        } else {
          puid = Picplum.Photo.select($(this).attr('src'), $(this).data('highres'));
          $(this).data('puid', puid);
          $(this).css({
            'box-sizing': 'content-box',
            border: '4px solid black',
            margin: '-4px 0 0 -4px'
          });
        }
        return Picplum.PickerUI.selected_ui();
      });
    },
    selected_ui: function() {
      var count, el;
      el = $(Picplum.settings.selected_count_class);
      count = Picplum.Photo.selected_count();
      Picplum.log(count);
      if (count > 0) {
        el.html("<b>" + count + "</b> photos selected for print");
        el.show();
        return $(Picplum.settings.print_selected_btn_class).show();
      } else {
        el.hide();
        return $(Picplum.settings.print_selected_btn_class).hide();
      }
    }
  };

  /*
  Initialize Library
  Picplum.init(APP_ID, KEY,
  {
  img_class: 'photo', 
  print_bar_class: 'print_bar', 
  print_selected_btn_class: 'print_selected_btn',
  print_all_btn_class: 'print_all_btn',
  selected_count_class: 'selected_count',
  insert_btns: true, 
  insert_count: true, 
  on_print: function(resp, data) {}
  }) 
  
  2. Done. 
  
  JS API Low Level
  
  Initialize Library
  Picplum.init(APP_ID, KEY) 
  
  Select Photo
  photo_obj = Picplum.Photo.select(
  thumb_url: 
  full_img_url:
  )
  
  Remove Photo
  Picplum.Photo.remove(photo_obj)
  
  Create Partner Page
  Picplum.Page.create({
  
  error: function(resp) {}, 
  success: function(resp, data) {}
  })
  Open Page
  Picplum.Page.open()
  */


}).call(this);
